# -*- coding: utf-8 -*-

"""
    awsecommerceservice.controllers.awse_commerce_service_binding_controller

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration
from ..models.item_search_response_msg import ItemSearchResponseMsg
from ..models.item_lookup_response_msg import ItemLookupResponseMsg
from ..models.browse_node_lookup_response_msg import BrowseNodeLookupResponseMsg
from ..models.similarity_lookup_response_msg import SimilarityLookupResponseMsg
from ..models.cart_get_response_msg import CartGetResponseMsg
from ..models.cart_add_response_msg import CartAddResponseMsg
from ..models.cart_create_response_msg import CartCreateResponseMsg
from ..models.cart_modify_response_msg import CartModifyResponseMsg
from ..models.cart_clear_response_msg import CartClearResponseMsg

class AWSECommerceServiceBindingController(BaseController):

    """A Controller to access Endpoints in the awsecommerceservice API."""


    def create_item_search(self,
                           body):
        """Does a POST request to /ItemSearch.

        TODO: type endpoint description here.

        Args:
            body (ItemSearchRequestMsg): TODO: type description here. Example:
                
        Returns:
            ItemSearchResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri()
        _query_builder += '/ItemSearch'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ItemSearchResponseMsg.from_dictionary)

    def create_item_lookup(self,
                           body):
        """Does a POST request to /ItemLookup.

        TODO: type endpoint description here.

        Args:
            body (ItemLookupRequestMsg): TODO: type description here. Example:
                
        Returns:
            ItemLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri()
        _query_builder += '/ItemLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ItemLookupResponseMsg.from_dictionary)

    def create_browse_node_lookup(self,
                                  body):
        """Does a POST request to /BrowseNodeLookup.

        TODO: type endpoint description here.

        Args:
            body (BrowseNodeLookupRequestMsg): TODO: type description here.
                Example: 

        Returns:
            BrowseNodeLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri()
        _query_builder += '/BrowseNodeLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, BrowseNodeLookupResponseMsg.from_dictionary)

    def create_similarity_lookup(self,
                                 body):
        """Does a POST request to /SimilarityLookup.

        TODO: type endpoint description here.

        Args:
            body (SimilarityLookupRequestMsg): TODO: type description here.
                Example: 

        Returns:
            SimilarityLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri()
        _query_builder += '/SimilarityLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, SimilarityLookupResponseMsg.from_dictionary)

    def create_cart_get(self,
                        body):
        """Does a POST request to /CartGet.

        TODO: type endpoint description here.

        Args:
            body (CartGetRequestMsg): TODO: type description here. Example: 

        Returns:
            CartGetResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri()
        _query_builder += '/CartGet'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartGetResponseMsg.from_dictionary)

    def create_cart_add(self,
                        body):
        """Does a POST request to /CartAdd.

        TODO: type endpoint description here.

        Args:
            body (CartAddRequestMsg): TODO: type description here. Example: 

        Returns:
            CartAddResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri()
        _query_builder += '/CartAdd'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartAddResponseMsg.from_dictionary)

    def create_cart_create(self,
                           body):
        """Does a POST request to /CartCreate.

        TODO: type endpoint description here.

        Args:
            body (CartCreateRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartCreateResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri()
        _query_builder += '/CartCreate'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartCreateResponseMsg.from_dictionary)

    def create_cart_modify(self,
                           body):
        """Does a POST request to /CartModify.

        TODO: type endpoint description here.

        Args:
            body (CartModifyRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartModifyResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri()
        _query_builder += '/CartModify'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartModifyResponseMsg.from_dictionary)

    def create_cart_clear(self,
                          body):
        """Does a POST request to /CartClear.

        TODO: type endpoint description here.

        Args:
            body (CartClearRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartClearResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri()
        _query_builder += '/CartClear'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartClearResponseMsg.from_dictionary)

    def create_item_search_9(self,
                             body):
        """Does a POST request to /ItemSearch.

        TODO: type endpoint description here.

        Args:
            body (ItemSearchRequestMsg): TODO: type description here. Example:
                
        Returns:
            ItemSearchResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTCA)
        _query_builder += '/ItemSearch'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ItemSearchResponseMsg.from_dictionary)

    def create_item_lookup_10(self,
                              body):
        """Does a POST request to /ItemLookup.

        TODO: type endpoint description here.

        Args:
            body (ItemLookupRequestMsg): TODO: type description here. Example:
                
        Returns:
            ItemLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTCA)
        _query_builder += '/ItemLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ItemLookupResponseMsg.from_dictionary)

    def create_browse_node_lookup_11(self,
                                     body):
        """Does a POST request to /BrowseNodeLookup.

        TODO: type endpoint description here.

        Args:
            body (BrowseNodeLookupRequestMsg): TODO: type description here.
                Example: 

        Returns:
            BrowseNodeLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTCA)
        _query_builder += '/BrowseNodeLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, BrowseNodeLookupResponseMsg.from_dictionary)

    def create_similarity_lookup_12(self,
                                    body):
        """Does a POST request to /SimilarityLookup.

        TODO: type endpoint description here.

        Args:
            body (SimilarityLookupRequestMsg): TODO: type description here.
                Example: 

        Returns:
            SimilarityLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTCA)
        _query_builder += '/SimilarityLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, SimilarityLookupResponseMsg.from_dictionary)

    def create_cart_get_13(self,
                           body):
        """Does a POST request to /CartGet.

        TODO: type endpoint description here.

        Args:
            body (CartGetRequestMsg): TODO: type description here. Example: 

        Returns:
            CartGetResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTCA)
        _query_builder += '/CartGet'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartGetResponseMsg.from_dictionary)

    def create_cart_add_14(self,
                           body):
        """Does a POST request to /CartAdd.

        TODO: type endpoint description here.

        Args:
            body (CartAddRequestMsg): TODO: type description here. Example: 

        Returns:
            CartAddResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTCA)
        _query_builder += '/CartAdd'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartAddResponseMsg.from_dictionary)

    def create_cart_create_15(self,
                              body):
        """Does a POST request to /CartCreate.

        TODO: type endpoint description here.

        Args:
            body (CartCreateRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartCreateResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTCA)
        _query_builder += '/CartCreate'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartCreateResponseMsg.from_dictionary)

    def create_cart_modify_16(self,
                              body):
        """Does a POST request to /CartModify.

        TODO: type endpoint description here.

        Args:
            body (CartModifyRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartModifyResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTCA)
        _query_builder += '/CartModify'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartModifyResponseMsg.from_dictionary)

    def create_cart_clear_17(self,
                             body):
        """Does a POST request to /CartClear.

        TODO: type endpoint description here.

        Args:
            body (CartClearRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartClearResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTCA)
        _query_builder += '/CartClear'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartClearResponseMsg.from_dictionary)

    def create_item_search_18(self,
                              body):
        """Does a POST request to /ItemSearch.

        TODO: type endpoint description here.

        Args:
            body (ItemSearchRequestMsg): TODO: type description here. Example:
                
        Returns:
            ItemSearchResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTCN)
        _query_builder += '/ItemSearch'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ItemSearchResponseMsg.from_dictionary)

    def create_item_lookup_19(self,
                              body):
        """Does a POST request to /ItemLookup.

        TODO: type endpoint description here.

        Args:
            body (ItemLookupRequestMsg): TODO: type description here. Example:
                
        Returns:
            ItemLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTCN)
        _query_builder += '/ItemLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ItemLookupResponseMsg.from_dictionary)

    def create_browse_node_lookup_20(self,
                                     body):
        """Does a POST request to /BrowseNodeLookup.

        TODO: type endpoint description here.

        Args:
            body (BrowseNodeLookupRequestMsg): TODO: type description here.
                Example: 

        Returns:
            BrowseNodeLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTCN)
        _query_builder += '/BrowseNodeLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, BrowseNodeLookupResponseMsg.from_dictionary)

    def create_similarity_lookup_21(self,
                                    body):
        """Does a POST request to /SimilarityLookup.

        TODO: type endpoint description here.

        Args:
            body (SimilarityLookupRequestMsg): TODO: type description here.
                Example: 

        Returns:
            SimilarityLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTCN)
        _query_builder += '/SimilarityLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, SimilarityLookupResponseMsg.from_dictionary)

    def create_cart_get_22(self,
                           body):
        """Does a POST request to /CartGet.

        TODO: type endpoint description here.

        Args:
            body (CartGetRequestMsg): TODO: type description here. Example: 

        Returns:
            CartGetResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTCN)
        _query_builder += '/CartGet'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartGetResponseMsg.from_dictionary)

    def create_cart_add_23(self,
                           body):
        """Does a POST request to /CartAdd.

        TODO: type endpoint description here.

        Args:
            body (CartAddRequestMsg): TODO: type description here. Example: 

        Returns:
            CartAddResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTCN)
        _query_builder += '/CartAdd'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartAddResponseMsg.from_dictionary)

    def create_cart_create_24(self,
                              body):
        """Does a POST request to /CartCreate.

        TODO: type endpoint description here.

        Args:
            body (CartCreateRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartCreateResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTCN)
        _query_builder += '/CartCreate'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartCreateResponseMsg.from_dictionary)

    def create_cart_modify_25(self,
                              body):
        """Does a POST request to /CartModify.

        TODO: type endpoint description here.

        Args:
            body (CartModifyRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartModifyResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTCN)
        _query_builder += '/CartModify'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartModifyResponseMsg.from_dictionary)

    def create_cart_clear_26(self,
                             body):
        """Does a POST request to /CartClear.

        TODO: type endpoint description here.

        Args:
            body (CartClearRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartClearResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTCN)
        _query_builder += '/CartClear'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartClearResponseMsg.from_dictionary)

    def create_item_search_27(self,
                              body):
        """Does a POST request to /ItemSearch.

        TODO: type endpoint description here.

        Args:
            body (ItemSearchRequestMsg): TODO: type description here. Example:
                
        Returns:
            ItemSearchResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTDE)
        _query_builder += '/ItemSearch'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ItemSearchResponseMsg.from_dictionary)

    def create_item_lookup_28(self,
                              body):
        """Does a POST request to /ItemLookup.

        TODO: type endpoint description here.

        Args:
            body (ItemLookupRequestMsg): TODO: type description here. Example:
                
        Returns:
            ItemLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTDE)
        _query_builder += '/ItemLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ItemLookupResponseMsg.from_dictionary)

    def create_browse_node_lookup_29(self,
                                     body):
        """Does a POST request to /BrowseNodeLookup.

        TODO: type endpoint description here.

        Args:
            body (BrowseNodeLookupRequestMsg): TODO: type description here.
                Example: 

        Returns:
            BrowseNodeLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTDE)
        _query_builder += '/BrowseNodeLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, BrowseNodeLookupResponseMsg.from_dictionary)

    def create_similarity_lookup_30(self,
                                    body):
        """Does a POST request to /SimilarityLookup.

        TODO: type endpoint description here.

        Args:
            body (SimilarityLookupRequestMsg): TODO: type description here.
                Example: 

        Returns:
            SimilarityLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTDE)
        _query_builder += '/SimilarityLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, SimilarityLookupResponseMsg.from_dictionary)

    def create_cart_get_31(self,
                           body):
        """Does a POST request to /CartGet.

        TODO: type endpoint description here.

        Args:
            body (CartGetRequestMsg): TODO: type description here. Example: 

        Returns:
            CartGetResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTDE)
        _query_builder += '/CartGet'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartGetResponseMsg.from_dictionary)

    def create_cart_add_32(self,
                           body):
        """Does a POST request to /CartAdd.

        TODO: type endpoint description here.

        Args:
            body (CartAddRequestMsg): TODO: type description here. Example: 

        Returns:
            CartAddResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTDE)
        _query_builder += '/CartAdd'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartAddResponseMsg.from_dictionary)

    def create_cart_create_33(self,
                              body):
        """Does a POST request to /CartCreate.

        TODO: type endpoint description here.

        Args:
            body (CartCreateRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartCreateResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTDE)
        _query_builder += '/CartCreate'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartCreateResponseMsg.from_dictionary)

    def create_cart_modify_34(self,
                              body):
        """Does a POST request to /CartModify.

        TODO: type endpoint description here.

        Args:
            body (CartModifyRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartModifyResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTDE)
        _query_builder += '/CartModify'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartModifyResponseMsg.from_dictionary)

    def create_cart_clear_35(self,
                             body):
        """Does a POST request to /CartClear.

        TODO: type endpoint description here.

        Args:
            body (CartClearRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartClearResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTDE)
        _query_builder += '/CartClear'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartClearResponseMsg.from_dictionary)

    def create_item_search_36(self,
                              body):
        """Does a POST request to /ItemSearch.

        TODO: type endpoint description here.

        Args:
            body (ItemSearchRequestMsg): TODO: type description here. Example:
                
        Returns:
            ItemSearchResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTES)
        _query_builder += '/ItemSearch'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ItemSearchResponseMsg.from_dictionary)

    def create_item_lookup_37(self,
                              body):
        """Does a POST request to /ItemLookup.

        TODO: type endpoint description here.

        Args:
            body (ItemLookupRequestMsg): TODO: type description here. Example:
                
        Returns:
            ItemLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTES)
        _query_builder += '/ItemLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ItemLookupResponseMsg.from_dictionary)

    def create_browse_node_lookup_38(self,
                                     body):
        """Does a POST request to /BrowseNodeLookup.

        TODO: type endpoint description here.

        Args:
            body (BrowseNodeLookupRequestMsg): TODO: type description here.
                Example: 

        Returns:
            BrowseNodeLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTES)
        _query_builder += '/BrowseNodeLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, BrowseNodeLookupResponseMsg.from_dictionary)

    def create_similarity_lookup_39(self,
                                    body):
        """Does a POST request to /SimilarityLookup.

        TODO: type endpoint description here.

        Args:
            body (SimilarityLookupRequestMsg): TODO: type description here.
                Example: 

        Returns:
            SimilarityLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTES)
        _query_builder += '/SimilarityLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, SimilarityLookupResponseMsg.from_dictionary)

    def create_cart_get_40(self,
                           body):
        """Does a POST request to /CartGet.

        TODO: type endpoint description here.

        Args:
            body (CartGetRequestMsg): TODO: type description here. Example: 

        Returns:
            CartGetResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTES)
        _query_builder += '/CartGet'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartGetResponseMsg.from_dictionary)

    def create_cart_add_41(self,
                           body):
        """Does a POST request to /CartAdd.

        TODO: type endpoint description here.

        Args:
            body (CartAddRequestMsg): TODO: type description here. Example: 

        Returns:
            CartAddResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTES)
        _query_builder += '/CartAdd'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartAddResponseMsg.from_dictionary)

    def create_cart_create_42(self,
                              body):
        """Does a POST request to /CartCreate.

        TODO: type endpoint description here.

        Args:
            body (CartCreateRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartCreateResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTES)
        _query_builder += '/CartCreate'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartCreateResponseMsg.from_dictionary)

    def create_cart_modify_43(self,
                              body):
        """Does a POST request to /CartModify.

        TODO: type endpoint description here.

        Args:
            body (CartModifyRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartModifyResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTES)
        _query_builder += '/CartModify'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartModifyResponseMsg.from_dictionary)

    def create_cart_clear_44(self,
                             body):
        """Does a POST request to /CartClear.

        TODO: type endpoint description here.

        Args:
            body (CartClearRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartClearResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTES)
        _query_builder += '/CartClear'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartClearResponseMsg.from_dictionary)

    def create_item_search_45(self,
                              body):
        """Does a POST request to /ItemSearch.

        TODO: type endpoint description here.

        Args:
            body (ItemSearchRequestMsg): TODO: type description here. Example:
                
        Returns:
            ItemSearchResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTFR)
        _query_builder += '/ItemSearch'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ItemSearchResponseMsg.from_dictionary)

    def create_item_lookup_46(self,
                              body):
        """Does a POST request to /ItemLookup.

        TODO: type endpoint description here.

        Args:
            body (ItemLookupRequestMsg): TODO: type description here. Example:
                
        Returns:
            ItemLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTFR)
        _query_builder += '/ItemLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ItemLookupResponseMsg.from_dictionary)

    def create_browse_node_lookup_47(self,
                                     body):
        """Does a POST request to /BrowseNodeLookup.

        TODO: type endpoint description here.

        Args:
            body (BrowseNodeLookupRequestMsg): TODO: type description here.
                Example: 

        Returns:
            BrowseNodeLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTFR)
        _query_builder += '/BrowseNodeLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, BrowseNodeLookupResponseMsg.from_dictionary)

    def create_similarity_lookup_48(self,
                                    body):
        """Does a POST request to /SimilarityLookup.

        TODO: type endpoint description here.

        Args:
            body (SimilarityLookupRequestMsg): TODO: type description here.
                Example: 

        Returns:
            SimilarityLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTFR)
        _query_builder += '/SimilarityLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, SimilarityLookupResponseMsg.from_dictionary)

    def create_cart_get_49(self,
                           body):
        """Does a POST request to /CartGet.

        TODO: type endpoint description here.

        Args:
            body (CartGetRequestMsg): TODO: type description here. Example: 

        Returns:
            CartGetResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTFR)
        _query_builder += '/CartGet'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartGetResponseMsg.from_dictionary)

    def create_cart_add_50(self,
                           body):
        """Does a POST request to /CartAdd.

        TODO: type endpoint description here.

        Args:
            body (CartAddRequestMsg): TODO: type description here. Example: 

        Returns:
            CartAddResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTFR)
        _query_builder += '/CartAdd'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartAddResponseMsg.from_dictionary)

    def create_cart_create_51(self,
                              body):
        """Does a POST request to /CartCreate.

        TODO: type endpoint description here.

        Args:
            body (CartCreateRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartCreateResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTFR)
        _query_builder += '/CartCreate'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartCreateResponseMsg.from_dictionary)

    def create_cart_modify_52(self,
                              body):
        """Does a POST request to /CartModify.

        TODO: type endpoint description here.

        Args:
            body (CartModifyRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartModifyResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTFR)
        _query_builder += '/CartModify'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartModifyResponseMsg.from_dictionary)

    def create_cart_clear_53(self,
                             body):
        """Does a POST request to /CartClear.

        TODO: type endpoint description here.

        Args:
            body (CartClearRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartClearResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTFR)
        _query_builder += '/CartClear'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartClearResponseMsg.from_dictionary)

    def create_item_search_54(self,
                              body):
        """Does a POST request to /ItemSearch.

        TODO: type endpoint description here.

        Args:
            body (ItemSearchRequestMsg): TODO: type description here. Example:
                
        Returns:
            ItemSearchResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTIN)
        _query_builder += '/ItemSearch'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ItemSearchResponseMsg.from_dictionary)

    def create_item_lookup_55(self,
                              body):
        """Does a POST request to /ItemLookup.

        TODO: type endpoint description here.

        Args:
            body (ItemLookupRequestMsg): TODO: type description here. Example:
                
        Returns:
            ItemLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTIN)
        _query_builder += '/ItemLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ItemLookupResponseMsg.from_dictionary)

    def create_browse_node_lookup_56(self,
                                     body):
        """Does a POST request to /BrowseNodeLookup.

        TODO: type endpoint description here.

        Args:
            body (BrowseNodeLookupRequestMsg): TODO: type description here.
                Example: 

        Returns:
            BrowseNodeLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTIN)
        _query_builder += '/BrowseNodeLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, BrowseNodeLookupResponseMsg.from_dictionary)

    def create_similarity_lookup_57(self,
                                    body):
        """Does a POST request to /SimilarityLookup.

        TODO: type endpoint description here.

        Args:
            body (SimilarityLookupRequestMsg): TODO: type description here.
                Example: 

        Returns:
            SimilarityLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTIN)
        _query_builder += '/SimilarityLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, SimilarityLookupResponseMsg.from_dictionary)

    def create_cart_get_58(self,
                           body):
        """Does a POST request to /CartGet.

        TODO: type endpoint description here.

        Args:
            body (CartGetRequestMsg): TODO: type description here. Example: 

        Returns:
            CartGetResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTIN)
        _query_builder += '/CartGet'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartGetResponseMsg.from_dictionary)

    def create_cart_add_59(self,
                           body):
        """Does a POST request to /CartAdd.

        TODO: type endpoint description here.

        Args:
            body (CartAddRequestMsg): TODO: type description here. Example: 

        Returns:
            CartAddResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTIN)
        _query_builder += '/CartAdd'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartAddResponseMsg.from_dictionary)

    def create_cart_create_60(self,
                              body):
        """Does a POST request to /CartCreate.

        TODO: type endpoint description here.

        Args:
            body (CartCreateRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartCreateResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTIN)
        _query_builder += '/CartCreate'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartCreateResponseMsg.from_dictionary)

    def create_cart_modify_61(self,
                              body):
        """Does a POST request to /CartModify.

        TODO: type endpoint description here.

        Args:
            body (CartModifyRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartModifyResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTIN)
        _query_builder += '/CartModify'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartModifyResponseMsg.from_dictionary)

    def create_cart_clear_62(self,
                             body):
        """Does a POST request to /CartClear.

        TODO: type endpoint description here.

        Args:
            body (CartClearRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartClearResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTIN)
        _query_builder += '/CartClear'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartClearResponseMsg.from_dictionary)

    def create_item_search_63(self,
                              body):
        """Does a POST request to /ItemSearch.

        TODO: type endpoint description here.

        Args:
            body (ItemSearchRequestMsg): TODO: type description here. Example:
                
        Returns:
            ItemSearchResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTIT)
        _query_builder += '/ItemSearch'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ItemSearchResponseMsg.from_dictionary)

    def create_item_lookup_64(self,
                              body):
        """Does a POST request to /ItemLookup.

        TODO: type endpoint description here.

        Args:
            body (ItemLookupRequestMsg): TODO: type description here. Example:
                
        Returns:
            ItemLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTIT)
        _query_builder += '/ItemLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ItemLookupResponseMsg.from_dictionary)

    def create_browse_node_lookup_65(self,
                                     body):
        """Does a POST request to /BrowseNodeLookup.

        TODO: type endpoint description here.

        Args:
            body (BrowseNodeLookupRequestMsg): TODO: type description here.
                Example: 

        Returns:
            BrowseNodeLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTIT)
        _query_builder += '/BrowseNodeLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, BrowseNodeLookupResponseMsg.from_dictionary)

    def create_similarity_lookup_66(self,
                                    body):
        """Does a POST request to /SimilarityLookup.

        TODO: type endpoint description here.

        Args:
            body (SimilarityLookupRequestMsg): TODO: type description here.
                Example: 

        Returns:
            SimilarityLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTIT)
        _query_builder += '/SimilarityLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, SimilarityLookupResponseMsg.from_dictionary)

    def create_cart_get_67(self,
                           body):
        """Does a POST request to /CartGet.

        TODO: type endpoint description here.

        Args:
            body (CartGetRequestMsg): TODO: type description here. Example: 

        Returns:
            CartGetResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTIT)
        _query_builder += '/CartGet'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartGetResponseMsg.from_dictionary)

    def create_cart_add_68(self,
                           body):
        """Does a POST request to /CartAdd.

        TODO: type endpoint description here.

        Args:
            body (CartAddRequestMsg): TODO: type description here. Example: 

        Returns:
            CartAddResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTIT)
        _query_builder += '/CartAdd'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartAddResponseMsg.from_dictionary)

    def create_cart_create_69(self,
                              body):
        """Does a POST request to /CartCreate.

        TODO: type endpoint description here.

        Args:
            body (CartCreateRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartCreateResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTIT)
        _query_builder += '/CartCreate'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartCreateResponseMsg.from_dictionary)

    def create_cart_modify_70(self,
                              body):
        """Does a POST request to /CartModify.

        TODO: type endpoint description here.

        Args:
            body (CartModifyRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartModifyResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTIT)
        _query_builder += '/CartModify'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartModifyResponseMsg.from_dictionary)

    def create_cart_clear_71(self,
                             body):
        """Does a POST request to /CartClear.

        TODO: type endpoint description here.

        Args:
            body (CartClearRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartClearResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTIT)
        _query_builder += '/CartClear'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartClearResponseMsg.from_dictionary)

    def create_item_search_72(self,
                              body):
        """Does a POST request to /ItemSearch.

        TODO: type endpoint description here.

        Args:
            body (ItemSearchRequestMsg): TODO: type description here. Example:
                
        Returns:
            ItemSearchResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTJP)
        _query_builder += '/ItemSearch'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ItemSearchResponseMsg.from_dictionary)

    def create_item_lookup_73(self,
                              body):
        """Does a POST request to /ItemLookup.

        TODO: type endpoint description here.

        Args:
            body (ItemLookupRequestMsg): TODO: type description here. Example:
                
        Returns:
            ItemLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTJP)
        _query_builder += '/ItemLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ItemLookupResponseMsg.from_dictionary)

    def create_browse_node_lookup_74(self,
                                     body):
        """Does a POST request to /BrowseNodeLookup.

        TODO: type endpoint description here.

        Args:
            body (BrowseNodeLookupRequestMsg): TODO: type description here.
                Example: 

        Returns:
            BrowseNodeLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTJP)
        _query_builder += '/BrowseNodeLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, BrowseNodeLookupResponseMsg.from_dictionary)

    def create_similarity_lookup_75(self,
                                    body):
        """Does a POST request to /SimilarityLookup.

        TODO: type endpoint description here.

        Args:
            body (SimilarityLookupRequestMsg): TODO: type description here.
                Example: 

        Returns:
            SimilarityLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTJP)
        _query_builder += '/SimilarityLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, SimilarityLookupResponseMsg.from_dictionary)

    def create_cart_get_76(self,
                           body):
        """Does a POST request to /CartGet.

        TODO: type endpoint description here.

        Args:
            body (CartGetRequestMsg): TODO: type description here. Example: 

        Returns:
            CartGetResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTJP)
        _query_builder += '/CartGet'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartGetResponseMsg.from_dictionary)

    def create_cart_add_77(self,
                           body):
        """Does a POST request to /CartAdd.

        TODO: type endpoint description here.

        Args:
            body (CartAddRequestMsg): TODO: type description here. Example: 

        Returns:
            CartAddResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTJP)
        _query_builder += '/CartAdd'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartAddResponseMsg.from_dictionary)

    def create_cart_create_78(self,
                              body):
        """Does a POST request to /CartCreate.

        TODO: type endpoint description here.

        Args:
            body (CartCreateRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartCreateResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTJP)
        _query_builder += '/CartCreate'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartCreateResponseMsg.from_dictionary)

    def create_cart_modify_79(self,
                              body):
        """Does a POST request to /CartModify.

        TODO: type endpoint description here.

        Args:
            body (CartModifyRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartModifyResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTJP)
        _query_builder += '/CartModify'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartModifyResponseMsg.from_dictionary)

    def create_cart_clear_80(self,
                             body):
        """Does a POST request to /CartClear.

        TODO: type endpoint description here.

        Args:
            body (CartClearRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartClearResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTJP)
        _query_builder += '/CartClear'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartClearResponseMsg.from_dictionary)

    def create_item_search_81(self,
                              body):
        """Does a POST request to /ItemSearch.

        TODO: type endpoint description here.

        Args:
            body (ItemSearchRequestMsg): TODO: type description here. Example:
                
        Returns:
            ItemSearchResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTUK)
        _query_builder += '/ItemSearch'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ItemSearchResponseMsg.from_dictionary)

    def create_item_lookup_82(self,
                              body):
        """Does a POST request to /ItemLookup.

        TODO: type endpoint description here.

        Args:
            body (ItemLookupRequestMsg): TODO: type description here. Example:
                
        Returns:
            ItemLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTUK)
        _query_builder += '/ItemLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ItemLookupResponseMsg.from_dictionary)

    def create_browse_node_lookup_83(self,
                                     body):
        """Does a POST request to /BrowseNodeLookup.

        TODO: type endpoint description here.

        Args:
            body (BrowseNodeLookupRequestMsg): TODO: type description here.
                Example: 

        Returns:
            BrowseNodeLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTUK)
        _query_builder += '/BrowseNodeLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, BrowseNodeLookupResponseMsg.from_dictionary)

    def create_similarity_lookup_84(self,
                                    body):
        """Does a POST request to /SimilarityLookup.

        TODO: type endpoint description here.

        Args:
            body (SimilarityLookupRequestMsg): TODO: type description here.
                Example: 

        Returns:
            SimilarityLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTUK)
        _query_builder += '/SimilarityLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, SimilarityLookupResponseMsg.from_dictionary)

    def create_cart_get_85(self,
                           body):
        """Does a POST request to /CartGet.

        TODO: type endpoint description here.

        Args:
            body (CartGetRequestMsg): TODO: type description here. Example: 

        Returns:
            CartGetResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTUK)
        _query_builder += '/CartGet'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartGetResponseMsg.from_dictionary)

    def create_cart_add_86(self,
                           body):
        """Does a POST request to /CartAdd.

        TODO: type endpoint description here.

        Args:
            body (CartAddRequestMsg): TODO: type description here. Example: 

        Returns:
            CartAddResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTUK)
        _query_builder += '/CartAdd'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartAddResponseMsg.from_dictionary)

    def create_cart_create_87(self,
                              body):
        """Does a POST request to /CartCreate.

        TODO: type endpoint description here.

        Args:
            body (CartCreateRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartCreateResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTUK)
        _query_builder += '/CartCreate'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartCreateResponseMsg.from_dictionary)

    def create_cart_modify_88(self,
                              body):
        """Does a POST request to /CartModify.

        TODO: type endpoint description here.

        Args:
            body (CartModifyRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartModifyResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTUK)
        _query_builder += '/CartModify'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartModifyResponseMsg.from_dictionary)

    def create_cart_clear_89(self,
                             body):
        """Does a POST request to /CartClear.

        TODO: type endpoint description here.

        Args:
            body (CartClearRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartClearResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTUK)
        _query_builder += '/CartClear'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartClearResponseMsg.from_dictionary)

    def create_item_search_90(self,
                              body):
        """Does a POST request to /ItemSearch.

        TODO: type endpoint description here.

        Args:
            body (ItemSearchRequestMsg): TODO: type description here. Example:
                
        Returns:
            ItemSearchResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTUS)
        _query_builder += '/ItemSearch'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ItemSearchResponseMsg.from_dictionary)

    def create_item_lookup_91(self,
                              body):
        """Does a POST request to /ItemLookup.

        TODO: type endpoint description here.

        Args:
            body (ItemLookupRequestMsg): TODO: type description here. Example:
                
        Returns:
            ItemLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTUS)
        _query_builder += '/ItemLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, ItemLookupResponseMsg.from_dictionary)

    def create_browse_node_lookup_92(self,
                                     body):
        """Does a POST request to /BrowseNodeLookup.

        TODO: type endpoint description here.

        Args:
            body (BrowseNodeLookupRequestMsg): TODO: type description here.
                Example: 

        Returns:
            BrowseNodeLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTUS)
        _query_builder += '/BrowseNodeLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, BrowseNodeLookupResponseMsg.from_dictionary)

    def create_similarity_lookup_93(self,
                                    body):
        """Does a POST request to /SimilarityLookup.

        TODO: type endpoint description here.

        Args:
            body (SimilarityLookupRequestMsg): TODO: type description here.
                Example: 

        Returns:
            SimilarityLookupResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTUS)
        _query_builder += '/SimilarityLookup'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, SimilarityLookupResponseMsg.from_dictionary)

    def create_cart_get_94(self,
                           body):
        """Does a POST request to /CartGet.

        TODO: type endpoint description here.

        Args:
            body (CartGetRequestMsg): TODO: type description here. Example: 

        Returns:
            CartGetResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTUS)
        _query_builder += '/CartGet'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartGetResponseMsg.from_dictionary)

    def create_cart_add_95(self,
                           body):
        """Does a POST request to /CartAdd.

        TODO: type endpoint description here.

        Args:
            body (CartAddRequestMsg): TODO: type description here. Example: 

        Returns:
            CartAddResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTUS)
        _query_builder += '/CartAdd'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartAddResponseMsg.from_dictionary)

    def create_cart_create_96(self,
                              body):
        """Does a POST request to /CartCreate.

        TODO: type endpoint description here.

        Args:
            body (CartCreateRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartCreateResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTUS)
        _query_builder += '/CartCreate'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartCreateResponseMsg.from_dictionary)

    def create_cart_modify_97(self,
                              body):
        """Does a POST request to /CartModify.

        TODO: type endpoint description here.

        Args:
            body (CartModifyRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartModifyResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTUS)
        _query_builder += '/CartModify'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartModifyResponseMsg.from_dictionary)

    def create_cart_clear_98(self,
                             body):
        """Does a POST request to /CartClear.

        TODO: type endpoint description here.

        Args:
            body (CartClearRequestMsg): TODO: type description here. Example:
                
        Returns:
            CartClearResponseMsg: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri(Configuration.Server.AWSECOMMERCESERVICEPORTUS)
        _query_builder += '/CartClear'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, CartClearResponseMsg.from_dictionary)
