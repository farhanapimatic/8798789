# -*- coding: utf-8 -*-

"""
    awsecommerceservice.models.saved_for_later_items

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
"""
import awsecommerceservice.models.cart_item
import awsecommerceservice.models.price

class SavedForLaterItems(object):

    """Implementation of the 'SavedForLaterItems' model.

    TODO: type model description here.

    Attributes:
        saved_for_later_item (list of CartItem): TODO: type description here.
        sub_total (Price): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "saved_for_later_item" : "SavedForLaterItem",
        "sub_total" : "SubTotal"
    }

    def __init__(self,
                 saved_for_later_item=None,
                 sub_total=None):
        """Constructor for the SavedForLaterItems class"""

        # Initialize members of the class
        self.saved_for_later_item = saved_for_later_item
        self.sub_total = sub_total


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        saved_for_later_item = None
        if dictionary.get("SavedForLaterItem") != None:
            saved_for_later_item = list()
            for structure in dictionary.get("SavedForLaterItem"):
                saved_for_later_item.append(awsecommerceservice.models.cart_item.CartItem.from_dictionary(structure))
        sub_total = awsecommerceservice.models.price.Price.from_dictionary(dictionary.get("SubTotal")) if dictionary.get("SubTotal") else None

        # Return an object of this model
        return cls(saved_for_later_item,
                   sub_total)


