# -*- coding: utf-8 -*-

"""
    awsecommerceservice.models.rental_listing

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
"""
import awsecommerceservice.models.price
import awsecommerceservice.models.non_negative_integer_with_units

class RentalListing(object):

    """Implementation of the 'RentalListing' model.

    TODO: type model description here.

    Attributes:
        price (Price): TODO: type description here.
        period (NonNegativeIntegerWithUnits): TODO: type description here.
        is_fulfilled_by_amazon (bool): TODO: type description here.
        disclaimer (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "price" : "Price",
        "period" : "Period",
        "is_fulfilled_by_amazon" : "IsFulfilledByAmazon",
        "disclaimer" : "Disclaimer"
    }

    def __init__(self,
                 price=None,
                 period=None,
                 is_fulfilled_by_amazon=None,
                 disclaimer=None):
        """Constructor for the RentalListing class"""

        # Initialize members of the class
        self.price = price
        self.period = period
        self.is_fulfilled_by_amazon = is_fulfilled_by_amazon
        self.disclaimer = disclaimer


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        price = awsecommerceservice.models.price.Price.from_dictionary(dictionary.get("Price")) if dictionary.get("Price") else None
        period = awsecommerceservice.models.non_negative_integer_with_units.NonNegativeIntegerWithUnits.from_dictionary(dictionary.get("Period")) if dictionary.get("Period") else None
        is_fulfilled_by_amazon = dictionary.get("IsFulfilledByAmazon")
        disclaimer = dictionary.get("Disclaimer")

        # Return an object of this model
        return cls(price,
                   period,
                   is_fulfilled_by_amazon,
                   disclaimer)


