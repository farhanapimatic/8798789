# -*- coding: utf-8 -*-

"""
    awsecommerceservice.models.cart_item

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
"""
import awsecommerceservice.models.meta_data_164
import awsecommerceservice.models.price

class CartItem(object):

    """Implementation of the 'CartItem' model.

    TODO: type model description here.

    Attributes:
        cart_item_id (string): TODO: type description here.
        quantity (string): TODO: type description here.
        asin (string): TODO: type description here.
        seller_nickname (string): TODO: type description here.
        title (string): TODO: type description here.
        product_group (string): TODO: type description here.
        meta_data (MetaData164): TODO: type description here.
        price (Price): TODO: type description here.
        item_total (Price): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "cart_item_id" : "CartItemId",
        "quantity" : "Quantity",
        "asin" : "ASIN",
        "seller_nickname" : "SellerNickname",
        "title" : "Title",
        "product_group" : "ProductGroup",
        "meta_data" : "MetaData",
        "price" : "Price",
        "item_total" : "ItemTotal"
    }

    def __init__(self,
                 cart_item_id=None,
                 quantity=None,
                 asin=None,
                 seller_nickname=None,
                 title=None,
                 product_group=None,
                 meta_data=None,
                 price=None,
                 item_total=None):
        """Constructor for the CartItem class"""

        # Initialize members of the class
        self.cart_item_id = cart_item_id
        self.quantity = quantity
        self.asin = asin
        self.seller_nickname = seller_nickname
        self.title = title
        self.product_group = product_group
        self.meta_data = meta_data
        self.price = price
        self.item_total = item_total


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        cart_item_id = dictionary.get("CartItemId")
        quantity = dictionary.get("Quantity")
        asin = dictionary.get("ASIN")
        seller_nickname = dictionary.get("SellerNickname")
        title = dictionary.get("Title")
        product_group = dictionary.get("ProductGroup")
        meta_data = awsecommerceservice.models.meta_data_164.MetaData164.from_dictionary(dictionary.get("MetaData")) if dictionary.get("MetaData") else None
        price = awsecommerceservice.models.price.Price.from_dictionary(dictionary.get("Price")) if dictionary.get("Price") else None
        item_total = awsecommerceservice.models.price.Price.from_dictionary(dictionary.get("ItemTotal")) if dictionary.get("ItemTotal") else None

        # Return an object of this model
        return cls(cart_item_id,
                   quantity,
                   asin,
                   seller_nickname,
                   title,
                   product_group,
                   meta_data,
                   price,
                   item_total)


